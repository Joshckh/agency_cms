generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model activity_logs {
  id          Int       @id @default(autoincrement())
  user_id     Int?
  action_type String?   @db.VarChar(50)
  description String?
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  users       users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model clients {
  id         Int        @id @default(autoincrement())
  name       String     @db.VarChar(100)
  email      String?    @db.VarChar(150)
  phone      String?    @db.VarChar(20)
  address    String?
  created_at DateTime?  @default(now()) @db.Timestamp(6)
  user_id    Int?
  users      users?     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  policies   policies[]
}

model commission_rates {
  id          Int     @id @default(autoincrement())
  rank_id     Int
  policy_type String  @db.VarChar(50)
  rate        Decimal @db.Decimal(5, 2)
  ranks       ranks   @relation(fields: [rank_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([rank_id, policy_type], map: "unique_rank_policy")
}

model commissions {
  id         Int       @id @default(autoincrement())
  user_id    Int?
  policy_id  Int?
  amount     Decimal?  @db.Decimal(10, 2)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  policies   policies? @relation(fields: [policy_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model leads {
  id                Int       @id @default(autoincrement())
  name              String?   @db.VarChar(100)
  contact_info      String?
  user_id           Int?
  status            String?   @default("new") @db.VarChar(20)
  next_contact_date DateTime? @db.Date
  notes             String?
  created_at        DateTime? @default(now()) @db.Timestamp(6)
  users             users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model policies {
  id          Int           @id @default(autoincrement())
  client_id   Int?
  user_id     Int?
  policy_type String?       @db.VarChar(50)
  start_date  DateTime      @db.Date
  end_date    DateTime      @db.Date
  premium     Decimal?      @db.Decimal(10, 2)
  status      String?       @default("active") @db.VarChar(20)
  commissions commissions[]
  clients     clients?      @relation(fields: [client_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users       users?        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  reminders   reminders[]
}

model ranks {
  id               Int                @id @default(autoincrement())
  role_name        String             @db.VarChar(20)
  commission_rates commission_rates[]
  users            users[]
}

model reminders {
  id            Int       @id @default(autoincrement())
  policy_id     Int?
  reminder_date DateTime  @db.Date
  method        String?   @db.VarChar(20)
  sent          Boolean?  @default(false)
  created_at    DateTime? @default(now()) @db.Timestamp(6)
  policies      policies? @relation(fields: [policy_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model users {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar(100)
  email         String          @unique @db.VarChar(150)
  password_hash String
  role          String?         @default("agent") @db.VarChar(20)
  rank_id       Int?
  activity_logs activity_logs[]
  clients       clients[]
  commissions   commissions[]
  leads         leads[]
  policies      policies[]
  ranks         ranks?          @relation(fields: [rank_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([rank_id], map: "idx_users_rank_id")
}
